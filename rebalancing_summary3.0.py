# make weight matrix
def make_weight_matrix(period, holdings, assets):
    '''
    period: a tuple pair of start and end datetime.timestamp
    holdings: holdings ratio by which the weight matrix is generated
    assets: a dataframe which contains asset daily prices with date index from which the weight matrix will copy its date index
    returns a dataframe which is a weight matrix for the given period
    '''
    start, end = period
    dates = assets.loc[start:end].index
    return pd.DataFrame([holdings.values for _ in  dates], index=dates, columns=holdings.index)    

# make holdings matrix by rebalancing holdings
def make_holdings_matrix(weights, holdings, periods, assets):
    '''
    weights: assets' weights you planned for the strategy (pandas.Series)
    holdings: unit numbers of assets(i.e. stock numers for stocks) you hold in the begining (pandas.Series)
    periods: [(datetime(start date), datetime(end date)), (datetime(start date), datetime(end date))...] 
             periods can be easily generated by Benchmark().find_periods() method
    assets: dataframe of daily assets prices
    
    returns holdings matrix, rebalancing every period handed over
    
    '''
    holdings_matrix = pd.DataFrame()

    for start, end in tqdm(periods):
        prior_holdings = holdings
        while True:
            values = assets.loc[end] * holdings
            off_values = values - values.sum()*weights  #off_values = off_remainders*assets.loc[end]
            off_real_qty = off_values / assets.loc[end]
            off_quotients = off_real_qty.astype('int64')
            # off_remainders = off_real_qty - off_quotients  
            holdings -= off_quotients     
            if off_quotients.sum() == 0:
                break
            

        print('\noff-values:\n', off_values, '\noff-values/asset prices: \n', off_values/assets.loc[end])
        if (prior_holdings*assets.loc[end]).sum() != (holdings*assets.loc[end]).sum():
            print('rebalaced amount is not equal to prior balance')
            break
        
        holdings_matrix = pd.concat([holdings_matrix, make_weight_matrix((start,end), holdings, assets)])    
    
    return holdings_matrix
